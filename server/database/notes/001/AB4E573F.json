{
    "markdownValue": "##### Vuex\n\n- Vuex使用单一状态树，作为【唯一数据源】存在\n- Vuex的状态存储是响应式的。\n- 不能直接改吧store中的状态。改变的唯一途径是显式的提交(commit)mutation\n- 核心点如下图：\n![image](https://vuex.vuejs.org/vuex.png)\n\n```js\nconst store = new Vuex.Store({\n    state:{\n        count: 0\n    },\n    getters:{\n        doCount: state=>{\n            return state.count\n        }\n    },\n    mutations:{\n        increment(state){\n            state.count++\n        }\n    },\n    actions:{\n    //context是一个与store具有相同属性和方法的对象\n        increment(context){\n            context.commit('increment')\n        }\n    }\n})\n\n```\n\n---\n\n##### State\n\n- 在子组件中通过计算属性computed获取\n- Vuex通过store选项，将状态单例对象从根组件“注入”到每一个子组件中(Vue.use(Vuex))，方便后续调用\n- mapState辅助函数\n    - 映射的计算属性名称与state的子节点名称相同时，可以给mapState传入一个字符串数组\n- 需要在state上添加新属性时\n        - Vue.set(obj,'newProp,123')\n        - state.obj = {...state.obj,newProp:123}\n\n\n```js\nexport default {\n    template:`<div>{{count}}</div>`,\n    computed:{   //计算属性\n        count(){\n            return store.state.count\n            //根组件注入后通过以下方式获取\n            //return this.$store.state.count\n        },\n        \n        //=====辅助函数=====\n        //和state下子节点名称对应\n        mapState(['count']),\n        //展开运算符\n        ...mapState(['','',''])\n    }\n}\n```\n \n\n---\n\n ##### Getter\n  - store的计算属性\n  - mapGetters辅助函数\n \n ```js\n const store = new Vuex.Store({\n     state:{\n         todos:[{\n             done: true\n         }]\n     },\n     getters:{\n     //getter接收state作为第一个参数\n         doneTodos: (state,getters)=>{\n             return state.todos.filter(todo=>todo.done)\n         }\n     }\n })\n ```\n \n ```js\n export default {\n    computed:{\n        //通过属性访问\n        //通过方法访问\n        \n        \n        //===============辅助函数用法================\n        //属性名和getter子节点名相同\n         ...mapGetters([\n            'doXXX'\n        ]),\n        //取别名\n        mapGetters({\n            doXXX: 'doXXX'\n        })\n    }\n }\n \n ```\n \n \n ---\n \n ##### Mutation\n  - 都是【同步】事务\n  - mutation包含一个\"事件类型\"和一个\"回调函数\"\n  - 接收state作为第一个参数\n \n```js\nconst SOME_MUTATION = 'SOME_MUTATION'\n\nconst store = new Vuex.Store({\n    state:{\n        count:1\n    },\n    mutations:{\n        increment(state,n){\n            state.count+=n\n        },\n        \n        test(state,obj){\n            state.count+=obj.n\n        },\n        \n        //使用常量名作为函数名(事件类型)\n        [SOME_MUTATION](state){\n            // mutate state\n        }\n    }\n})\n\n```\n\n```js\nexport default {\n    methods:{\n        //==调用方法==\n        store.commit('increment',10)\n        \n        store.commit('test',{n:10})\n        \n        store.commit({\n            type: 'increment',\n            n: 10\n        })\n        \n        //=============辅助函数用法==============\n        ...mapMutations([\n            'increment',\n            //将this.increment() 映射为this.$store.commit('increment')\n            'incrementBy'\n            //将this.incrementBy(amount)映射为this.$store.commit('increment',amount)\n        ]),\n        \n        ...mapMutations({\n          add: 'increment' \n          // 将 `this.add()` 映射为 `this.$store.commit('increment')`\n        })\n    }\n}\n```\n\n##### Action\n\n- Action提交mutation,不直接变更状态\n- Action可以包含任意异步操作\n\n\n```js\nconst store = new Vuex.Store({\n    state:{\n        count:1\n    },\n    actions:{\n        //原始写法,context.commit 提交一个 mutation\n        increment(context){\n            context.commit('increment')\n        }\n        //参数解构写法\n        increment({commit,dispatch,getters,state}){\n            commit('increment')\n        }\n        \n        incrementAsync ({ commit }) {\n            setTimeout(() => {\n              commit('increment')\n            }, 1000)\n        }\n    }\n})\n```\n\n```js\nexport default {\n    methods:{\n        store.dispatch('increment'),\n        \n        // 以载荷形式分发\n        store.dispatch('incrementAsync', {\n          amount: 10\n        })\n        \n        // 以对象形式分发\n        store.dispatch({\n          type: 'incrementAsync',\n          amount: 10\n        })\n        \n        //==========辅助函数用法===============\n        ...mapActions([\n          'increment', // 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`\n    \n          // `mapActions` 也支持载荷：\n          'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`\n        ]),\n        ...mapActions({\n          add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')`\n        })\n    }\n}\n```\n\n\n##### Module\n\n- 模块分割\n\n```js\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n\n- 命名空间\n    - namespaced: true\n    - 当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据“模块注册的路径”调整命名。==备注：模块注册路径也就是模块嵌套的命名路径==\n    - 你可以将模块的“空间名称字符串”作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文\n\n```js\ncomputed: {\n  ...mapState('some/nested/module', {\n    a: state => state.a,\n    b: state => state.b\n  })\n},\nmethods: {\n  ...mapActions('some/nested/module', [\n    'foo', // -> this.foo()\n    'bar' // -> this.bar()\n  ])\n}\n```",
    "render": "<h5><a id=\"Vuex_0\"></a>Vuex</h5>\n<ul>\n<li>Vuex使用单一状态树，作为【唯一数据源】存在</li>\n<li>Vuex的状态存储是响应式的。</li>\n<li>不能直接改吧store中的状态。改变的唯一途径是显式的提交(commit)mutation</li>\n<li>核心点如下图：<br />\n<img src=\"https://vuex.vuejs.org/vuex.png\" alt=\"image\" /></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store({\n    <span class=\"hljs-attr\">state</span>:{\n        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n    },\n    <span class=\"hljs-attr\">getters</span>:{\n        <span class=\"hljs-attr\">doCount</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">state</span>=&gt;</span>{\n            <span class=\"hljs-keyword\">return</span> state.count\n        }\n    },\n    <span class=\"hljs-attr\">mutations</span>:{\n        increment(state){\n            state.count++\n        }\n    },\n    <span class=\"hljs-attr\">actions</span>:{\n    <span class=\"hljs-comment\">//context是一个与store具有相同属性和方法的对象</span>\n        increment(context){\n            context.commit(<span class=\"hljs-string\">'increment'</span>)\n        }\n    }\n})\n\n</code></div></pre>\n<hr />\n<h5><a id=\"State_35\"></a>State</h5>\n<ul>\n<li>在子组件中通过计算属性computed获取</li>\n<li>Vuex通过store选项，将状态单例对象从根组件“注入”到每一个子组件中(Vue.use(Vuex))，方便后续调用</li>\n<li>mapState辅助函数\n<ul>\n<li>映射的计算属性名称与state的子节点名称相同时，可以给mapState传入一个字符串数组</li>\n</ul>\n</li>\n<li>需要在state上添加新属性时<br />\n- Vue.set(obj,‘newProp,123’)<br />\n- state.obj = {…state.obj,newProp:123}</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;{{count}}&lt;/div&gt;`</span>,\n    <span class=\"hljs-attr\">computed</span>:{   <span class=\"hljs-comment\">//计算属性</span>\n        count(){\n            <span class=\"hljs-keyword\">return</span> store.state.count\n            <span class=\"hljs-comment\">//根组件注入后通过以下方式获取</span>\n            <span class=\"hljs-comment\">//return this.$store.state.count</span>\n        },\n        \n        <span class=\"hljs-comment\">//=====辅助函数=====</span>\n        <span class=\"hljs-comment\">//和state下子节点名称对应</span>\n        mapState([<span class=\"hljs-string\">'count'</span>]),\n        <span class=\"hljs-comment\">//展开运算符</span>\n        ...mapState([<span class=\"hljs-string\">''</span>,<span class=\"hljs-string\">''</span>,<span class=\"hljs-string\">''</span>])\n    }\n}\n</code></div></pre>\n<hr />\n<h5><a id=\"Getter_68\"></a>Getter</h5>\n<ul>\n<li>store的计算属性</li>\n<li>mapGetters辅助函数</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store({\n    <span class=\"hljs-attr\">state</span>:{\n        <span class=\"hljs-attr\">todos</span>:[{\n            <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">true</span>\n        }]\n    },\n    <span class=\"hljs-attr\">getters</span>:{\n    <span class=\"hljs-comment\">//getter接收state作为第一个参数</span>\n        doneTodos: <span class=\"hljs-function\">(<span class=\"hljs-params\">state,getters</span>)=&gt;</span>{\n            <span class=\"hljs-keyword\">return</span> state.todos.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">todo</span>=&gt;</span>todo.done)\n        }\n    }\n})\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n   <span class=\"hljs-attr\">computed</span>:{\n       <span class=\"hljs-comment\">//通过属性访问</span>\n       <span class=\"hljs-comment\">//通过方法访问</span>\n       \n       \n       <span class=\"hljs-comment\">//===============辅助函数用法================</span>\n       <span class=\"hljs-comment\">//属性名和getter子节点名相同</span>\n        ...mapGetters([\n           <span class=\"hljs-string\">'doXXX'</span>\n       ]),\n       <span class=\"hljs-comment\">//取别名</span>\n       mapGetters({\n           <span class=\"hljs-attr\">doXXX</span>: <span class=\"hljs-string\">'doXXX'</span>\n       })\n   }\n}\n\n</code></div></pre>\n<hr />\n<h5><a id=\"Mutation_112\"></a>Mutation</h5>\n<ul>\n<li>都是【同步】事务</li>\n<li>mutation包含一个&quot;事件类型&quot;和一个&quot;回调函数&quot;</li>\n<li>接收state作为第一个参数</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> SOME_MUTATION = <span class=\"hljs-string\">'SOME_MUTATION'</span>\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store({\n    <span class=\"hljs-attr\">state</span>:{\n        <span class=\"hljs-attr\">count</span>:<span class=\"hljs-number\">1</span>\n    },\n    <span class=\"hljs-attr\">mutations</span>:{\n        increment(state,n){\n            state.count+=n\n        },\n        \n        test(state,obj){\n            state.count+=obj.n\n        },\n        \n        <span class=\"hljs-comment\">//使用常量名作为函数名(事件类型)</span>\n        [SOME_MUTATION](state){\n            <span class=\"hljs-comment\">// mutate state</span>\n        }\n    }\n})\n\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">methods</span>:{\n        <span class=\"hljs-comment\">//==调用方法==</span>\n        store.commit(<span class=\"hljs-string\">'increment'</span>,<span class=\"hljs-number\">10</span>)\n        \n        store.commit(<span class=\"hljs-string\">'test'</span>,{<span class=\"hljs-attr\">n</span>:<span class=\"hljs-number\">10</span>})\n        \n        store.commit({\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'increment'</span>,\n            <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">10</span>\n        })\n        \n        <span class=\"hljs-comment\">//=============辅助函数用法==============</span>\n        ...mapMutations([\n            <span class=\"hljs-string\">'increment'</span>,\n            <span class=\"hljs-comment\">//将this.increment() 映射为this.$store.commit('increment')</span>\n            <span class=\"hljs-string\">'incrementBy'</span>\n            <span class=\"hljs-comment\">//将this.incrementBy(amount)映射为this.$store.commit('increment',amount)</span>\n        ]),\n        \n        ...mapMutations({\n          <span class=\"hljs-attr\">add</span>: <span class=\"hljs-string\">'increment'</span> \n          <span class=\"hljs-comment\">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span>\n        })\n    }\n}\n</code></div></pre>\n<h5><a id=\"Action_171\"></a>Action</h5>\n<ul>\n<li>Action提交mutation,不直接变更状态</li>\n<li>Action可以包含任意异步操作</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store({\n    <span class=\"hljs-attr\">state</span>:{\n        <span class=\"hljs-attr\">count</span>:<span class=\"hljs-number\">1</span>\n    },\n    <span class=\"hljs-attr\">actions</span>:{\n        <span class=\"hljs-comment\">//原始写法,context.commit 提交一个 mutation</span>\n        increment(context){\n            context.commit(<span class=\"hljs-string\">'increment'</span>)\n        }\n        <span class=\"hljs-comment\">//参数解构写法</span>\n        increment({commit,dispatch,getters,state}){\n            commit(<span class=\"hljs-string\">'increment'</span>)\n        }\n        \n        incrementAsync ({ commit }) {\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n              commit(<span class=\"hljs-string\">'increment'</span>)\n            }, <span class=\"hljs-number\">1000</span>)\n        }\n    }\n})\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">methods</span>:{\n        store.dispatch(<span class=\"hljs-string\">'increment'</span>),\n        \n        <span class=\"hljs-comment\">// 以载荷形式分发</span>\n        store.dispatch(<span class=\"hljs-string\">'incrementAsync'</span>, {\n          <span class=\"hljs-attr\">amount</span>: <span class=\"hljs-number\">10</span>\n        })\n        \n        <span class=\"hljs-comment\">// 以对象形式分发</span>\n        store.dispatch({\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'incrementAsync'</span>,\n          <span class=\"hljs-attr\">amount</span>: <span class=\"hljs-number\">10</span>\n        })\n        \n        <span class=\"hljs-comment\">//==========辅助函数用法===============</span>\n        ...mapActions([\n          <span class=\"hljs-string\">'increment'</span>, <span class=\"hljs-comment\">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span>\n    \n          <span class=\"hljs-comment\">// `mapActions` 也支持载荷：</span>\n          <span class=\"hljs-string\">'incrementBy'</span> <span class=\"hljs-comment\">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span>\n        ]),\n        ...mapActions({\n          <span class=\"hljs-attr\">add</span>: <span class=\"hljs-string\">'increment'</span> <span class=\"hljs-comment\">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span>\n        })\n    }\n}\n</code></div></pre>\n<h5><a id=\"Module_232\"></a>Module</h5>\n<ul>\n<li>模块分割</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> moduleA = {\n  <span class=\"hljs-attr\">state</span>: { ... },\n  <span class=\"hljs-attr\">mutations</span>: { ... },\n  <span class=\"hljs-attr\">actions</span>: { ... },\n  <span class=\"hljs-attr\">getters</span>: { ... }\n}\n\n<span class=\"hljs-keyword\">const</span> moduleB = {\n  <span class=\"hljs-attr\">state</span>: { ... },\n  <span class=\"hljs-attr\">mutations</span>: { ... },\n  <span class=\"hljs-attr\">actions</span>: { ... }\n}\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">modules</span>: {\n    <span class=\"hljs-attr\">a</span>: moduleA,\n    <span class=\"hljs-attr\">b</span>: moduleB\n  }\n})\n\nstore.state.a <span class=\"hljs-comment\">// -&gt; moduleA 的状态</span>\nstore.state.b <span class=\"hljs-comment\">// -&gt; moduleB 的状态</span>\n</code></div></pre>\n<ul>\n<li>命名空间\n<ul>\n<li>namespaced: true</li>\n<li>当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据“模块注册的路径”调整命名。<mark>备注：模块注册路径也就是模块嵌套的命名路径</mark></li>\n<li>你可以将模块的“空间名称字符串”作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文</li>\n</ul>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">computed: {\n  ...mapState(<span class=\"hljs-string\">'some/nested/module'</span>, {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> state.a,\n    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> state.b\n  })\n},\n<span class=\"hljs-attr\">methods</span>: {\n  ...mapActions(<span class=\"hljs-string\">'some/nested/module'</span>, [\n    <span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-comment\">// -&gt; this.foo()</span>\n    <span class=\"hljs-string\">'bar'</span> <span class=\"hljs-comment\">// -&gt; this.bar()</span>\n  ])\n}\n</code></div></pre>\n",
    "url": "/notes/001/AB4E573F"
}