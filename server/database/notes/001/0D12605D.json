{
    "markdownValue": "\n\n\n##### 组件全局注册\n\n```js\nVue.component('my-component-name', {\n  // ... 选项 ...\n})\n\nnew Vue({\n  //... options\n  components：{\n     my-component-name\n  }\n})\n```\n\n\n##### 组件局部注册\n\n```js\nvar ComponentA = { /* ... */ }\nvar ComponentB = { /* ... */ }\nvar ComponentC = { /* ... */ }\n\nnew Vue({\n  el: '#app',\n  components: {\n    'component-a': ComponentA,\n    'component-b': ComponentB\n  }\n})\n\n```\n\n##### 模块系统中注册\n\n```js\nimport ComponentA from './ComponentA'\nimport ComponentC from './ComponentC'\n\nexport default {\n  components: {\n    ComponentA,\n    ComponentC\n  },\n  // ...\n}\n\n```\n\n##### 【Vue插件写法】\n\n- 声明插件\n- 写插件\n- 注册插件\n- 使用插件\n\n\n###### 1.插件注册\n```js\n// 调用 `MyPlugin.install(Vue)`\n//在根实例之前注册插件\nimportant MyPlugin from './MyPlugin.js'\nVue.use(MyPlugin)\n\nnew Vue({\n  //... options\n})\n```\n\n###### 2.自定义插件写法\n```js\n//自定义插件提供一下四种写法\n\nMyPlugin.install = function (Vue, options) {\n  \n  // 1. 添加全局方法或属性\n  Vue.myGlobalMethod = function () {\n    // 逻辑...\n  }\n\n  // 2. 添加全局资源\n  Vue.directive('my-directive', {\n    bind (el, binding, vnode, oldVnode) {\n      // 逻辑...\n    }\n    ...\n  })\n\n  // 3. 注入组件\n  Vue.mixin({\n    created: function () {\n      // 逻辑...\n    }\n    ...\n  })\n\n  // 4. 添加实例方法\n  Vue.prototype.$myMethod = function (methodOptions) {\n    // 逻辑...\n  }\n}\n```\n\n\n",
    "render": "<h5><a id=\"_3\"></a>组件全局注册</h5>\n<pre><div class=\"hljs\"><code class=\"lang-js\">Vue.component(<span class=\"hljs-string\">'my-component-name'</span>, {\n  <span class=\"hljs-comment\">// ... 选项 ...</span>\n})\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-comment\">//... options</span>\n  components：{\n     my-component-name\n  }\n})\n</code></div></pre>\n<h5><a id=\"_19\"></a>组件局部注册</h5>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ComponentA = { <span class=\"hljs-comment\">/* ... */</span> }\n<span class=\"hljs-keyword\">var</span> ComponentB = { <span class=\"hljs-comment\">/* ... */</span> }\n<span class=\"hljs-keyword\">var</span> ComponentC = { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">'#app'</span>,\n  <span class=\"hljs-attr\">components</span>: {\n    <span class=\"hljs-string\">'component-a'</span>: ComponentA,\n    <span class=\"hljs-string\">'component-b'</span>: ComponentB\n  }\n})\n\n</code></div></pre>\n<h5><a id=\"_36\"></a>模块系统中注册</h5>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">import</span> ComponentA <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ComponentA'</span>\n<span class=\"hljs-keyword\">import</span> ComponentC <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ComponentC'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">components</span>: {\n    ComponentA,\n    ComponentC\n  },\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n</code></div></pre>\n<h5><a id=\"Vue_52\"></a>【Vue插件写法】</h5>\n<ul>\n<li>声明插件</li>\n<li>写插件</li>\n<li>注册插件</li>\n<li>使用插件</li>\n</ul>\n<h6><a id=\"1_60\"></a>1.插件注册</h6>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 调用 `MyPlugin.install(Vue)`</span>\n<span class=\"hljs-comment\">//在根实例之前注册插件</span>\nimportant MyPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./MyPlugin.js'</span>\nVue.use(MyPlugin)\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-comment\">//... options</span>\n})\n</code></div></pre>\n<h6><a id=\"2_72\"></a>2.自定义插件写法</h6>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//自定义插件提供一下四种写法</span>\n\nMyPlugin.install = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Vue, options</span>) </span>{\n  \n  <span class=\"hljs-comment\">// 1. 添加全局方法或属性</span>\n  Vue.myGlobalMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 逻辑...</span>\n  }\n\n  <span class=\"hljs-comment\">// 2. 添加全局资源</span>\n  Vue.directive(<span class=\"hljs-string\">'my-directive'</span>, {\n    bind (el, binding, vnode, oldVnode) {\n      <span class=\"hljs-comment\">// 逻辑...</span>\n    }\n    ...\n  })\n\n  <span class=\"hljs-comment\">// 3. 注入组件</span>\n  Vue.mixin({\n    <span class=\"hljs-attr\">created</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-comment\">// 逻辑...</span>\n    }\n    ...\n  })\n\n  <span class=\"hljs-comment\">// 4. 添加实例方法</span>\n  Vue.prototype.$myMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">methodOptions</span>) </span>{\n    <span class=\"hljs-comment\">// 逻辑...</span>\n  }\n}\n</code></div></pre>\n",
    "url": "/notes/001/0D12605D"
}